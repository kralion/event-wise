// Generated by CodiumAI

/*
Code Analysis:
-The function 'TodoCard' is used to render a card component for a single todo item.
- The function takes in a single object 'todo' as its input, which contains various properties of the todo item such as title, description, priority, duration, date, and category.
- The function uses various components from the antd library such as Card, Popover, Tag, Space, Avatar, Skeleton, and Modal to render the card.
- The function also uses various icons such as EditOutlined, CheckCircleOutlined, and DeleteOutlined from the antd library to render the actions available for the todo item.
- The function uses the 'useTodoContext' hook to access the 'editTodo' function from the TodoContext.
- The function uses the 'todoReducer' function to access the 'handleDeleteTodo' and 'handleFinishTodo' functions.
- The function uses the 'useState' hook to manage the loading state of the card.
- The function uses the 'useEffect' hook to set the loading state to false after a delay of 1 second.
- The function uses the 'useState' hook to manage the state of the modal component.
- The function defines a 'showModal' function to set the 'isModalOpen' state to true.
- The function defines a 'handleOk' function to set the 'isModalOpen' state to false.
- The function renders the card component with the appropriate properties and actions based on the todo item.
- If the loading state is true, the function renders a skeleton component instead of the actual card component.
- If the loading state is false, the function renders the actual card component with the appropriate properties and actions.
- When the user clicks on the card component, the function opens a modal component with the details of the todo item.
*/
import TodoCard from "@/components/TodoCard";

describe("TodoCard_function", () => {
	// Tests that the card component is rendered with all the properties and actions for a todo item. tags: [happy path]
	test("test_render_card_component", () => {
		// Arrange
		const todo = {
			title: "Test Todo",
			description: "This is a test todo",
			priority: "alta",
			duration: 60,
			date: new Date(),
			category: "trabajo",
		};

		// Act
		render(<TodoCard todo={todo} />);

		// Assert
		expect(screen.getByText("Test Todo")).toBeInTheDocument();
		expect(screen.getByText("This is a test todo")).toBeInTheDocument();
		expect(screen.getByText("alta")).toBeInTheDocument();
		expect(screen.getByText("60")).toBeInTheDocument();
		expect(screen.getByText("trabajo")).toBeInTheDocument();
		expect(screen.getByRole("button", { name: "delete" })).toBeInTheDocument();
		expect(screen.getByRole("button", { name: "edit" })).toBeInTheDocument();
		expect(
			screen.getByRole("button", { name: "finished" }),
		).toBeInTheDocument();
	});

	// Tests that clicking on the card component opens a modal with the details of the todo item. tags: [happy path]
	test("test_click_card_component", () => {
		// Arrange
		const todo = {
			title: "Test Todo",
			description: "This is a test todo",
			priority: "alta",
			duration: 60,
			date: new Date(),
			category: "trabajo",
		};
		render(<TodoCard todo={todo} />);
		const button = screen.getByRole("button", { name: "Test Todo" });

		// Act
		fireEvent.click(button);

		// Assert
		expect(screen.getByText("TODO DETAILS")).toBeInTheDocument();
		expect(screen.getByText("Titulo : Test Todo")).toBeInTheDocument();
		expect(screen.getByText("Programado para el :")).toBeInTheDocument();
		expect(screen.getByText("Duracion estimada :60")).toBeInTheDocument();
		expect(screen.getByText("Categorizado como :")).toBeInTheDocument();
	});

	// Tests the functionality of the 'edittodo', 'handledeletetodo', and 'handlefinishtodo' functions. tags: [happy path]
	test("test_todo_actions", () => {
		// Arrange
		const todo = {
			title: "Test Todo",
			description: "This is a test todo",
			priority: "alta",
			duration: 60,
			date: new Date(),
			category: "trabajo",
		};
		const editTodoMock = jest.fn();
		const handleDeleteTodoMock = jest.fn();
		const handleFinishTodoMock = jest.fn();
		render(
			<TodoContext.Provider value={{ editTodo: editTodoMock }}>
				<TodoCard todo={todo} />
			</TodoContext.Provider>,
		);

		// Act
		fireEvent.click(screen.getByRole("button", { name: "edit" }));
		fireEvent.click(screen.getByRole("button", { name: "delete" }));
		fireEvent.click(screen.getByRole("button", { name: "finished" }));

		// Assert
		expect(editTodoMock).toHaveBeenCalledWith(todo);
		expect(handleDeleteTodoMock).toHaveBeenCalledWith(todo);
		expect(handleFinishTodoMock).toHaveBeenCalledWith(todo);
	});

	// Tests that the loading state is true and a skeleton component is rendered instead of the actual card component. tags: [edge case]
	test("test_loading_state", () => {
		// Arrange
		const todo = {
			title: "Test Todo",
			description: "This is a test todo",
			priority: "alta",
			duration: 60,
			date: new Date(),
			category: "trabajo",
		};
		const setLoadingMock = jest.fn();
		jest.useFakeTimers();
		render(<TodoCard todo={todo} setLoading={setLoadingMock} loading={true} />);

		// Act
		jest.advanceTimersByTime(1000);

		// Assert
		expect(setLoadingMock).toHaveBeenCalledWith(false);
		expect(screen.getByTestId("skeleton")).toBeInTheDocument();
	});

	// Tests that the todo item has missing or invalid properties and the component still renders without errors. tags: [edge case]
	test("test_missing_properties", () => {
		// Arrange
		const todo = {
			title: "Test Todo",
			description: "This is a test todo",
			priority: "alta",
			duration: 60,
		};
		render(<TodoCard todo={todo} />);

		// Assert
		expect(screen.getByText("Test Todo")).toBeInTheDocument();
		expect(screen.getByText("This is a test todo")).toBeInTheDocument();
		expect(screen.getByText("alta")).toBeInTheDocument();
		expect(screen.getByText("60")).toBeInTheDocument();
	});

	// Tests that the state of the modal component is managed correctly. tags: [general behavior]
	test("test_modal_state", () => {
		// Arrange
		const todo = {
			title: "Test Todo",
			description: "This is a test todo",
			priority: "alta",
			duration: 60,
			date: new Date(),
			category: "trabajo",
		};
		render(<TodoCard todo={todo} />);
		const button = screen.getByRole("button", { name: "Test Todo" });

		// Act
		fireEvent.click(button);
		fireEvent.click(screen.getByRole("button", { name: "Cancel" }));

		// Assert
		expect(screen.queryByText("TODO DETAILS")).not.toBeInTheDocument();
	});
});
